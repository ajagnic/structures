package linkedlist // import "github.com/ajagnic/structures/linkedlist"


TYPES

type DoublyLinkedList struct {
	Head   *dllNode
	Tail   *dllNode
	Length int
}

func (l *DoublyLinkedList) Append(val interface{})

func (l *DoublyLinkedList) Delete(val interface{})

func (l *DoublyLinkedList) Insert(i int, val interface{})

func (l *DoublyLinkedList) Prepend(val interface{})

type LinkedList struct {
	Head   *node
	Tail   *node
	Length int
}

func (l *LinkedList) Append(val interface{})

func (l *LinkedList) Delete(val interface{})

func (l *LinkedList) Insert(i int, val interface{})

func (l *LinkedList) Prepend(val interface{})

func (l *LinkedList) Reverse()

package stackqueue // import "github.com/ajagnic/structures/stackqueue"


TYPES

type Queue struct {
	// Has unexported fields.
}

func (q *Queue) Dequeue() interface{}

func (q *Queue) Enqueue(val interface{})

func (q *Queue) Peek() interface{}

type Stack struct {
	Top    *node
	Length int
}

func (s *Stack) Peek() interface{}

func (s *Stack) Pop() interface{}

func (s *Stack) Push(val interface{})

package tree // import "github.com/ajagnic/structures/tree"


TYPES

type BinaryHeap struct {
	A []int
}

func (h *BinaryHeap) Delete(i int)

func (h *BinaryHeap) ExtractMax() int

func (h *BinaryHeap) Insert(val int)

func (h *BinaryHeap) ModifyValue(i, newValue int)

func (h *BinaryHeap) Search(val int) (i int, ok bool)

type BinarySearchTree struct {
	Root *Node
}

func (t *BinarySearchTree) Insert(val int)

func (t *BinarySearchTree) Lookup(val int) *Node

func (t *BinarySearchTree) Remove(val int)

type Node struct {
	Left  *Node
	Right *Node
	Value int
}

type Trie struct {
	Root *trieNode
}

func (t *Trie) Delete(key string)

func (t *Trie) Insert(key string)

func (t *Trie) Keys() []string

func (t *Trie) Search(key string) bool

